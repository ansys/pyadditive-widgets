name: CI
on:
  pull_request:
  merge_group:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: "3.12"
  DOCUMENTATION_CNAME: "widgets.additive.docs.pyansys.com"
  LIBRARY_NAME: "ansys-additive-widgets"
  ANSYS_PRODUCT_IMAGE: "ghcr.io/ansys-internal/additive:25.1.0-alpha3"
  ANSYS_PRODUCT_CONTAINER: "ansys-additive-container"
  MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}
  MEILISEARCH_HOST_URL: ${{ vars.MEILISEARCH_HOST_URL }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-changelog:
    name: "Update CHANGELOG (on release)"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: ansys/actions/doc-deploy-changelog@v8
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - uses: ansys/actions/code-style@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-style:
    name: "Documentation style"
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoke-tests:
    name: "Build and Smoke tests"
    runs-on: ${{ matrix.os }}
    needs: [code-style]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: ansys/actions/build-wheelhouse@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Tests"
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false
    steps:
      - name: PyAnsys tests check
        uses: ansys/actions/tests-pytest@v8
        with:
          pytest-extra-args: "--cov=ansys --cov-report=term --cov-report=html:.cov/html --cov-report=xml:.cov/xml"
          python-version: ${{ matrix.python-version }}

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-tests-${{ matrix.os }}
          path: .cov
          retention-days: 7

      - name: Upload coverage results (as .coverage)
        uses: actions/upload-artifact@v4
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        with:
          name: coverage-file-tests-${{ matrix.os }}
          path: .coverage
          retention-days: 7

      - name: Upload HTML Coverage Results
        if: env.MAIN_PYTHON_VERSION == matrix.python-version
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-${{ matrix.os }}
          path: .cov/html
          retention-days: 7

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.os == 'windows-latest'
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: .cov/xml

  doc-build:
    name: "Building library documentation"
    if: github.event_name != 'merge_group'
    strategy:
      matrix:
        runner: [public-ubuntu-latest-8-cores]
    runs-on: ${{ matrix.runner }}
    needs: [doc-style]
    steps:
      - name: "Login into the GitHub registry container"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Download the Docker image for Ansys Additive"
        run: |
          docker pull ${{ env.ANSYS_PRODUCT_IMAGE }}

      - name: "Start product server"
        # Don't use --rm flag. The container is removed in a later step
        # after collecting the logs.
        run: |
          docker run --detach \
            --name ${{ env.ANSYS_PRODUCT_CONTAINER }} \
            -e ANSYSLMD_LICENSE_FILE=1055@${{ env.LICENSE_SERVER }} \
            -p 50052:50052 \
            ${{ env.ANSYS_PRODUCT_IMAGE }}
        env:
          LICENSE_SERVER: ${{ secrets.LICENSE_SERVER }}

      - name: "Setup headless display"
        uses: pyvista/setup-headless-display-action@v3

      - name: "Checkout code"
        uses: actions/checkout@v4

      - name: "Build documentation"
        uses: ansys/actions/doc-build@v8
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          checkout: false
          sphinxopts: "-j auto"
          dependencies: "pandoc"
        env:
          GENERATING_DOCS: 1
          ANSYS_ADDITIVE_ADDRESS: "localhost:50052"

      - name: "Collect logs and shutdown server"
        if: ${{ always() }}
        run: |
          docker stop ${{ env.ANSYS_PRODUCT_CONTAINER }}
          docker logs ${{ env.ANSYS_PRODUCT_CONTAINER }} >> docker-logs.txt
          docker rm ${{ env.ANSYS_PRODUCT_CONTAINER }}

      - name: "Upload container logs as artifacts"
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs.txt
          path: docker-logs.txt

  build-library:
    name: "Build library artifacts"
    needs: [tests, doc-build]
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [doc-build, build-library]
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-dev@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: [doc-build, build-library]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - uses: ansys/actions/doc-deploy-stable@v8
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-index-dev:
    name: "Deploy dev index docs"
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: doc-deploy-dev
    steps:
      - name: "Deploy the latest documentation index"
        uses: ansys/actions/doc-deploy-index@v8
        with:
          cname: "${{ env.DOCUMENTATION_CNAME }}/version/dev"
          index-name: "${{ env.LIBRARY_NAME }}-vdev"
          host-url: ${{ env.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  doc-index-stable:
    name: "Deploy stable docs index"
    runs-on: ubuntu-latest
    needs: doc-deploy-stable
    steps:
      - name: "Install Git and clone project"
        uses: actions/checkout@v4

      - name: "Install the package requirements"
        run: pip install -e .

      - name: "Get the version to PyMeilisearch"
        run: |
          VERSION=$(python -c "from ansys.additive.widgets import __version__; print('.'.join(__version__.split('.')[:2]))")
          VERSION_MEILI=$(python -c "from ansys.additive.widgets import __version__; print('-'.join(__version__.split('.')[:2]))")
          echo "Calculated VERSION: $VERSION"
          echo "Calculated VERSION_MEILI: $VERSION_MEILI"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_MEILI=$VERSION_MEILI" >> $GITHUB_ENV

      - name: "Deploy the latest documentation index"
        uses: ansys/actions/doc-deploy-index@v8
        with:
          cname: "${{ env.DOCUMENTATION_CNAME }}/version/${{ env.VERSION }}"
          index-name: "${{ env.LIBRARY_NAME }}-v${{ env.VERSION_MEILI }}"
          host-url: ${{ env.MEILISEARCH_HOST_URL }}
          api-key: ${{ env.MEILISEARCH_API_KEY }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  release:
    name: Release project
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
    needs: [doc-build, build-library, update-changelog]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Release to the public PyPI repository
        uses: ansys/actions/release-pypi-public@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          use-trusted-publisher: true

      - name: Release to GitHub
        uses: ansys/actions/release-github@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

  automerge-prs:
    name: Automerge PRs (dependabot and pre-commit.ci only)
    runs-on: ubuntu-latest
    needs: [build-library]
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Automerge PRs
        uses: ansys/actions/hk-automerge-prs@v8
        with:
          approver: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          approver-token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
